patch:
  # 方案列表
  schema_list:
    # 可以直接删除或注释不需要的方案，对应的 *.schema.yaml 方案文件也可以直接删除
    # 除了 t9，它依赖于 rime_ice，用九宫格别删 rime_ice.schema.yaml
    # - schema: rime_ice               # 雾凇拼音（全拼）
    # - schema: t9                     # 雾凇拼音（九宫格）
    # - schema: double_pinyin          # 自然码双拼
    # - schema: double_pinyin_abc      # 智能 ABC 双拼
    # - schema: double_pinyin_mspy     # 微软双拼
    # - schema: double_pinyin_sogou    # 搜狗双拼
    - schema: double_pinyin_flypy    # 小鹤双拼
    # - schema: double_pinyin_ziguang  # 紫光双拼


  # 方案选单相关
  switcher:
    caption: 「方案选单」
    hotkeys:
      # - F4
      - Control+F4
      - Control+grave
      # - Alt+grave
      - Control+Shift+grave
    save_options:  # 开关记忆（方案中的 switches），从方案选单（而非快捷键）切换时会记住的选项，需要记忆的开关不能设定 reset
      - ascii_punct
      - traditionalization
      - emoji
      - full_shape
    fold_options: true            # 呼出时是否折叠，多方案时建议折叠 true ，一个方案建议展开 false
    abbreviate_options: true      # 折叠时是否缩写选项
    option_list_separator: ' / '  # 折叠时的选项分隔符

  # 中西文切换
  #
  # 【good_old_caps_lock】 CapsLock 切换到大写或切换中英。
  # （macOS 偏好设置的优先级更高，如果勾选【使用大写锁定键切换“ABC”输入法】则始终会切换输入法）
  #
  # 切换中英：
  # 不同的选项表示：打字打到一半时按下了 CapsLock、Shift、Control 后： 
  # commit_code  上屏原始的编码，然后切换到英文
  # commit_text  上屏拼出的词句，然后切换到英文
  # clear        清除未上屏内容，然后切换到英文
  # inline_ascii 无输入时，切换中英；有输入时，切换到临时英文模式，按回车上屏后回到中文状态
  # noop         屏蔽快捷键，不切换中英，但不要屏蔽 CapsLock
  ascii_composer:
    good_old_caps_lock: true  # true | false
    switch_key:
      Caps_Lock: clear  # commit_code | commit_text | clear
      Shift_L: clear    # commit_code | commit_text | inline_ascii | clear | noop
      Shift_R: noop     # commit_code | commit_text | inline_ascii | clear | noop
      Control_L: noop   # commit_code | commit_text | inline_ascii | clear | noop
      Control_R: noop   # commit_code | commit_text | inline_ascii | clear | noop


  # 快捷键
  key_binder:
    # Lua 配置: 以词定字（上屏当前词句的第一个或最后一个字），和中括号翻页有冲突
    select_first_character: "bracketleft"  # 左中括号 [
    select_last_character: "bracketright"  # 右中括号 ]

    bindings:
      # Tab / Shift+Tab 切换光标至下/上一个拼音
      - { when: composing, accept: Shift+Tab, send: Shift+Left }
      - { when: composing, accept: Tab, send: Shift+Right }
      # Tab / Shift+Tab 翻页
      # - { when: has_menu, accept: Shift+Tab, send: Page_Up }
      # - { when: has_menu, accept: Tab, send: Page_Down }

      # Option/Alt + ←/→ 切换光标至下/上一个拼音
      - { when: composing, accept: Alt+Left, send: Shift+Left }
      - { when: composing, accept: Alt+Right, send: Shift+Right }

      # 翻页 - =
      # - { when: has_menu, accept: minus, send: Page_Up }
      # - { when: has_menu, accept: equal, send: Page_Down }

      # 翻页 , .
      - { when: paging, accept: comma, send: Page_Up }
      - { when: has_menu, accept: period, send: Page_Down }

      # 翻页 [ ]
      # - { when: paging, accept: bracketleft, send: Page_Up }
      # - { when: has_menu, accept: bracketright, send: Page_Down }

      # numbered_mode_switch:
      # - { when: always, accept: Control+Shift+1, select: .next }               # 在最近的两个方案之间切换
      # - { when: always, accept: Control+Shift+2, toggle: ascii_mode }          # 切换中英
      - { when: always, accept: Control+Shift+3, toggle: ascii_punct }           # 切换中英标点
      - { when: always, accept: Control+Shift+4, toggle: traditionalization }    # 切换简繁
      # - { when: always, accept: Control+Shift+5, toggle: full_shape }          # 切换全半角

      # emacs_editing:
      # - { when: composing, accept: Control+p, send: Up }
      # - { when: composing, accept: Control+n, send: Down }
      # - { when: composing, accept: Control+b, send: Left }
      # - { when: composing, accept: Control+f, send: Right }
      # - { when: composing, accept: Control+a, send: Home }
      # - { when: composing, accept: Control+e, send: End }
      # - { when: composing, accept: Control+d, send: Delete }
      # - { when: composing, accept: Control+k, send: Shift+Delete }
      # - { when: composing, accept: Control+h, send: BackSpace }
      # - { when: composing, accept: Control+g, send: Escape }
      # - { when: composing, accept: Control+bracketleft, send: Escape }
      # - { when: composing, accept: Control+y, send: Page_Up }
      # - { when: composing, accept: Alt+v, send: Page_Up }
      # - { when: composing, accept: Control+v, send: Page_Down }

      # optimized_mode_switch:
      # - { when: always, accept: Control+Shift+space, select: .next }
      # - { when: always, accept: Shift+space, toggle: ascii_mode }
      # 全角/半角切换
      - { when: always, accept: Control+comma, toggle: full_shape }
      # 切换中英文标点
      - { when: always, accept: Control+period, toggle: ascii_punct }
      # - { when: always, accept: Control+slash, toggle: traditionalization }

      # 将小键盘 0~9 . 映射到主键盘，数字金额大写的 Lua（R1234.5678）可使用小键盘输入
      - {accept: KP_0, send: 0, when: composing}
      - {accept: KP_1, send: 1, when: composing}
      - {accept: KP_2, send: 2, when: composing}
      - {accept: KP_3, send: 3, when: composing}
      - {accept: KP_4, send: 4, when: composing}
      - {accept: KP_5, send: 5, when: composing}
      - {accept: KP_6, send: 6, when: composing}
      - {accept: KP_7, send: 7, when: composing}
      - {accept: KP_8, send: 8, when: composing}
      - {accept: KP_9, send: 9, when: composing}
      - {accept: KP_Decimal, send: period, when: composing}
